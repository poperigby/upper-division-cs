{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"Welcome to Data Structures and Algorithms, Autumn 2023  Syllabus and Class Information <p>   You can find our public class website with all information you need at: </p> <p> https://theevergreenstatecollege.github.io/upper-division-cs/dsa-23au/ </p> <p> which is mirrored to our Canvas site at </p> <p> https://canvas.evergreen.edu/courses/5926 </p> <p>.</p> <p> Our first class is on Tuesday Sept. 26th at 10am (PST) in Evans 2617 (Computer Center)      </p> <p>         Data Structures and Algorithms is a 12-credit upper division applied Computer Science program that is important for doing any additional advanced work in computer science and software engineering. Some students in the program have already studied data structures (DS &amp; A). Those students will be creating their own curriculum in groups. For students who want to learn DS &amp; A, the program syllabus will look like this:         </p> <p> <ul> <li>Data Structures and Algorithms;</li> <li>Team programming projects (with ChangeMakers)</li> <li>Synthesis of real-world problems with software modeling</li> <li>Software Engineering</li> </ul> </p> <p>         As computer science students, you will deepen your technical knowledge and skills required to understand, analyze, modify, and build complex software systems. The concepts and skills from Data Structures and Algorithms are key for software engineering and programming. Through this program you will also deepen your understanding of computing systems, both in theory and practice. The work will provide prerequisite knowledge for Evergreen's advanced computer science programs.\u00a0         </p> <p>         Working on team projects is very important for almost any job, especially in computer science. Also, at Evergreen we expect students to take charge of their learning. We make this easier by providing\u00a0 a caring and safe innovative team environment. This is ideal for those looking for a practical, hands-on approach to learning. This radically different pathway gives students the opportunity to set-up and run their own projects and ventures. Inspired by the pioneering Finnish \u2018Tiimiakatemia\u2019 approach, we designed this program collaboratively with the ChangeMaker Lab, which was the first to introduce this approach in the United States. The Tiimiakatemia ChangeMaker Lab is accredited by Tiimiakatemia Global\u00ae.         </p> <p>         In the first few weeks you will form a Team Company of up to 20 students, and work on real projects and research the programming, software engineering, and theoretical\u00a0 skills needed for those projects. You will gain entrepreneurial experience and learn how to operate and run an organization as a Holacratic structure. As a Team Entrepreneur, you\u2019ll work with your team in your own office environment virtually or in the classroom in our innovative open office space.\u00a0 You will create and manage projects around your passions, attend directors' meetings. You will have the opportunity to learn the auxiliary skills to manage budgets and build valuable contacts and networks.\u00a0         </p> <p>         You will learn by doing and specifically develop the following job skills: Self\u2010leadership skills, Project leading skills, Planning skills, Team Coaching skills, Strategic skills, Team leadership skills, Service, negotiation and selling skills, Understanding of financial issues, Marketing skills, Innovation skills, Team leadership skills, Data processing and IT \u2013skills, Team Learning skills, Creativity skills, International skills and Communication skills and work on developing Initiative, Courage to make choices and goal orientation.         </p> <p>         This full-time daytime program will be taught on the Olympia campus. Students who need to participate fully remotely should contact the faculty to discuss that option.         </p> <p>         Computer technology has an impact on almost anything we do, and data structures and algorithms are central to advanced study in computer science and to building large complex systems. When applying for positions such as Software Developer or Software Engineer, you will probably find that this program is the most important in helping you prepare for job interviews. In this program, you\u2019ll learn about ways to organize data (we\u2019ll see various data structures such as Lists, Trees, Graphs), ways to compare algorithms (we\u2019ll focus on space and time complexity using big Oh) and efficiently solve programming problems. It will also give you a chance to practice object-oriented and functional programming.         </p> <p>         We are so excited to work with all of you in this awesome program.         </p> <p>         We expect everyone to attend in person, unless you contact us to make alternative arrangements.         </p> Class Meeting Times <p>Monday</p> <p>Tuesday</p> <p>Wednesday</p> <p>Thursday</p> <p>Friday</p> 10am-1pm <p>Data Structures</p> <p>(Evans 2617)</p> <p>Systems and Teams</p> <p>(Evans 2617)</p> <p> </p> <p></p> <p>Data Structures</p> <p>(Evans 2617)</p> <p> </p> <p></p> 12noon-1pm <p> </p> <p></p> <p>Forest Walk</p> <p></p> <p>&amp;nbps;</p> <p></p> <p>break</p> <p></p> <p>tutoring</p> <p></p> 1-3pm <p>Cracking the Coding Interview / Software Engineering</p> <p>(Evans 2617)</p> <p>ChangeMaker Lab</p> <p>Sem2 C4105</p> <p> </p> <p></p> <p>ChangeMaker Lab</p> <p>Sem2 C4105</p> <p> </p> <p></p> 3-5pm <p> </p> <p></p> <p>ChangeMaker Lab</p> <p>Sem2 C4105</p> <p> </p> <p></p> <p>ChangeMaker Lab</p> <p>Sem2 C4105</p> <p> </p> <p></p> <p> </p> <p>Textbooks:</p> <p>Required</p> <ul> <li>The Algorithm Design Manual, 3rd edition, by Steven Skiena ()</li> <li>Cracking the Coding Interview \u2013 189 programming questions and solutions, Gayle Laakmann McDowell, 6th edition (CCI)ISBN-13: 978-0984782857 </li> </ul> <p>Optional</p> <ul> <li>Data Structures and Algorithms in Java, 3rd or 4th edition, by Mark Allen Weiss</li> <li>Dive into Systems (DIS)\u00a0 Dive Into Systems Text: https://diveintosystems.org/development/antora/diveintosystems/1.0/index.html</li> <li>Parallel computing for Beginners https://www.learnpdc.org/PDCBeginners2e/</li> </ul> Concrete Examples Synthesis / Lateral Thinking Week 1 <p>A Self-Guided Tour</p> <p>RAM Model, Lists</p> <p>Arrays, Links, Counters</p> <p>Interfaces, CRUD Operations</p> <p>IntelliJ and Git: practice and warmup</p> <p>Pair Programming: what roles? what rules?</p> <p>Learning Log, ChatGPT / AI prompting</p> <p>ChangeMaker teams, learning together</p> Week 2 <p>Implementation vs. Interfaces</p> <p>Stacks, Queues</p> <p>Key-Value Maps, Hashing</p> <p>Collisions, Links</p> <p>Time-Space and Other Dualities, Resources</p> <p>How to trade off time for space, vice versa?</p> <p>Combining two or more data structures</p> <p>Counting and visualizing resources: VisualVM</p> Week 3 <p>Asymptotic Analysis (Big O)</p> <p>Trees, Relations, Searching</p> <p>Traversals: Bread-first, Depth-First</p> <p>Heaps (Priority Queues)</p> <p>Recursion and Iteration</p> <p>Cleaning Up: Invariants, Rebalancing</p> <p>Combining two or more data structures</p> <p>Overview of Final Project: Problem-Finding</p> Week 4 <p>Rebalancing Trees</p> <p>Red-Black Trees</p> <p>Rebalancing Heaps</p> <p>Inventing New Data Structures</p> <p>An Exotic Zoo: Fibonacci Forest, Skip Lists</p> <p>Amortized Analysis</p> <p>Combining two or more data structures</p> <p>Final Project Work: Collecting / Mocking Datasets</p> Week 5 <p>Maximum Subset Sum</p> <p>Dynamic Programming</p> <p>Interval Scheduling</p> <p>Satisficing (Greedy)</p> <p>Subproblems</p> <p>Memoizing / Caching</p> <p>Combining two or more algorithms</p> <p>Final Project Work: Collecting Datasets</p> Week 6 <p>Graphs</p> <p>Topological Sort, Dependencies</p> <p>Shortest Path (Dijkstra's)</p> <p>Network Flow</p> <p>MapQuest / Google Maps</p> <p>Find algorithms in the news</p> <p>Final Project Work: Designing Operations</p> <p>AI proompting and co-pilot: write code</p> Week 7 <p>Sorting, with Heaps and Trees</p> <p>Merge Sort</p> <p>Quicksort</p> <p>Radix Sort</p> <p>Randomized analysis</p> <p>Combining two sorts</p> <p>Joke Sorts: delay as much as possible</p> <p>Art: Pixel sorting</p> Week 8 <p>Database Indexes, Search</p> <p>Page Rank</p> <p>Linear Systems of Equations</p> <p>Constraint Satisfaction</p> <p>Boggle / Scrabble</p> <p>Final Project Work: Analysis and Correctness</p> <p>Find linear systems / constraints in real-life</p> <p>Connect DS &amp; A to another discipline</p> Week 9 <p>Karatsuba / Matrix Multiplication</p> <p>Divide and Conquer</p> <p>Streaming Algorithms</p> <p>Parallel Merge Sort</p> <p>Data Privacy</p> <p>Find algorithms in the news</p> <p>Parallelize a previous algorithm</p> <p>Final Project Work: Analysis and Correctness</p> Week 10 <p>Bonus Topics / Catchup Week</p> <p>Quantum DS &amp; A</p> <p>Recommender Systems</p> <p>Collaborative Filtering</p> <p>Finding Real World Examples: Go Local, Go Deep</p> <p>Final Project Work</p> <p>Synthesizing notes\u00a0</p> Tracks <p> Student who have never taken DSA before will take DSA in this quarter and participate in Changemakers team companies. They may choose either the Java programming language (with examples and support provided by DSA assignments) or any  other programming language where they must provide their own support and collaborate with each other. For example, if you choose Rust, you need to find at least one other classmate who wants to do Rust and check in with  each other. These students will be evaluated by Richard with feedback from Paul. </p> <p> Students who have already taken DSA will be doing an Independent Learning Contract, with a self-designed  curriculum, weekly milestones, and a statement of deliverables. These students will be evaluated by Paul with feedback from Richard, and will be asked to give updates on their progress and share feedback with the class each Thursday morning except the first. </p> Evaluation <p> Depending on which track of the class you are doing, you will be evaluated by a different faculty. If in doubt, please ask either Richard or Paul. <p> <ul> <li>Students in the DSA and Changemakers track will be evaluated by Richard, with feedback from Paul.</li> <li>Students in the Independent Learning Contract track will be evaluated by Paul, with feedback from Richard.</li> </ul> Paul's Feedback Criteria <p> For students in both tracks, Paul will assign *quantity* of credits (totalling 12 or 16 as agreed upon after the first week) based on amount of work, and write a narrative evaluation based on the quality of work and concepts demonstrated. </p> <p>Quantity of Credits</p> <ul> <li>33% from completing weekly DSA assignments, or completing weekly milestones.</li> <li>33% from participating in class activities and GitHub contributions to the class monorepo, especially merging pull requests.</li> <li>33% from final project, which may be your Changemakers' team or individual project, or your Independent Learning Contract.</li> </ul> View Course Stream View Course Analytics View Course Notifications Coming Up View Calendar <ul> <li>Nothing for the next week</li> </ul> <p> </p> START HERE <p>Or click on Modules in menu at left to view list.</p>"},{"location":"FinalProject/","title":"Final Project","text":"<p>A progressively realized project demonstrating your data structures and algorithms skills and also your ability to find and develop them in a Real-World Application.</p>"},{"location":"FinalProject/#credits-and-team","title":"Credits and Team","text":"<p>One-third of your credits and evaluation this quarter will be based on your final project, which will be done as a team that you choose among classmates in both the Data Structures and Algorithms program and the Changemakers business program. Teams may be  solo (one person) or up to 20 people.</p> <p>We recommend and will support you in pushing outside your comfort zone. If you normally  prefer to work alone, we suggest finding teammates, and if you normally like to work with  teammates, we suggest going it alone. But no matter what, the teaching staff and your classmates will be here to talk and go through the experience with you.</p>"},{"location":"FinalProject/#progression-through-10-weeks","title":"Progression Through 10 Weeks","text":"<p>While each week we will introduce new concepts, data structures, and algorithms, and  self-contained homework exercises to help you learn, you will be progressively synthesizing these  learnings, adding them to your final project.</p> <p>At the end, you will have the following deliverables to submit to instructors as well as a  portfolio piece that you can display on your Git profiles, your websites and social media, and as a starting point for your work in later quarters (Purpose Driven Web in Winter 2024 and Software Construction in Spring 2024).</p>"},{"location":"FinalProject/#criteria","title":"Criteria","text":"<ul> <li>Use and combine at least four data structures (beyond an array or a linked list) or algorithms.</li> <li>Be compelling for you and your team. It doesn't have to appeal to anyone else but you and your teammates. You'll be working on this problem for 10 weeks, so when you think of the project, you want to feel  a certain eagerness to make progress.</li> <li>Describe your invariant, in both plain English and in math or code. This invariant is true  of your data structures at every step along the way from input to output, and your algorithms  should preserve it.</li> <li>Contains about 5 unit tests that verify your solution works as intended.</li> <li>Contain 500 lines of code that compiles, runs, and passes your tests.</li> <li>Contain at least 100 data items, either real or mocked. </li> </ul>"},{"location":"FinalProject/#real-world-application","title":"Real-World Application","text":"<p>The guiding force and north star that will help align your work and give you direction is your Real-World Application (RWA).</p> <p>Data structures like arrays and binary search trees, and algorithms like heapsort or  finding the shortest path, only exist in the abstract, conceptually clean and simple. When you use them to solve a Real-World Application, you may encounter the following challenges and need to discuss and work with your team on them.</p> <ul> <li>Identifying a Real-World Application of a data structure or algorithm in the first place.</li> <li>Removing unnecessary details and simplifying (abstraction).</li> <li>Modeling the problem with relevant details.</li> <li>Generating mock data or collecting real data.</li> <li>Code that creates data structures based on the data.</li> <li>Algorithms that transform the data in an automated way to a more useful form.</li> <li>Examples (at least three) demonstrating running your code on the data you collected and why the  returned output is expected.</li> <li>Instructions on how to run your code.</li> </ul>"},{"location":"FinalProject/#collecting-real-data","title":"Collecting Real Data","text":"<p>Traditionally, we deal with data in table form. Each table can be called an \"entity\". Think of a spreadsheet. It has a number of columns, also called \"fields\", and a number of rows, which are analogous or \"equal\" items that all have the same fields, though they may have different values.</p> <p>In fact, you may wish to open up a spreadsheet (Excel, or Google Sheets online, or any similar program) and start collecting data here. When you're ready, somewhere around Week 4 or 5, you can export this data as a  CSV (Comma-Separated Values) file, read it into your program, and then \"hydrate\" or \"reinflate\"</p> <p>Real data is preferred to mock data in this class, but they each have their uses.</p> <p>The \"smell\" of real data and its rough surfaces, distribution of digits, and messy incompleteness contribute a compelling beauty and internal consistency to your work that will immediately shine  forth to whoever reads it.</p> <p>You can start collecting data on Day 1 of the class. The best data is gathered a little at a time, rather than gradually all at once. You may only vaguely be aware of what to collect, but that's okay. If you add new columns later on and your early data is missing those columns, you can go back and \"backfill\" them as time permits. In conjunction, you can modify your algorithm to gracefully handle missing columns.</p> <p>Handling missing, incomplete, or invalid data, and also preprocessing or \"cleaning up\" data is a very  common operation in Real-World Applications.</p>"},{"location":"FinalProject/#steps-to-refining-your-project","title":"Steps to Refining Your Project","text":""},{"location":"FinalProject/#rubric","title":"Rubric","text":"<p>Total of 4 credits (in the 12 credit version of the program) or </p>"},{"location":"SoftwareSetup/","title":"Software Setup","text":"<p>You will only need to go through this Software Setup once at the beginning of Data Structures &amp; Algorithms. However, if you have never used GitHub and GitPod before, or if you need a refresher, please budget plenty of time to complete these steps. You'll need them to complete Assignment 1 in the first week, as well as all the other assignments.</p> <p>As you read through, be on the lookout for mistakes, discrepancies, bugs, or anything that doesn't work out the way you expect. Congrats, you've found an issue that  you can use to complete Step 9 of the Cloud IDE setup below. </p>"},{"location":"SoftwareSetup/#github","title":"GitHub","text":"<p>You'll need to sign up for a GitHub account.</p>"},{"location":"SoftwareSetup/#1-go-to-github","title":"1. Go to GitHub","text":"<p>In your browser, enter the url https://github.com</p> <p>Click on \"Register\" to create a new account, or \"Login\" if you already have an account.</p> <p>Verify with your phone number.</p>"},{"location":"SoftwareSetup/#2-fork-the-class-monorepo","title":"2. Fork the class monorepo","text":"<p>Go to https://github.com/TheEvergreenStateCollege/upper-division-cs</p> <p>In the top-right corner of the page, click Fork.</p> <p>Under \"Owner,\" select the dropdown menu and click an owner for the forked repository.</p> <p>Click Create fork.</p>"},{"location":"SoftwareSetup/#3-go-to-your-github-settings","title":"3. Go to your GitHub settings","text":"<p>In your GitHub email settings: https://github.com/settings/emails</p> <p>and copy your private, \"no-reply\" email address that GitHub generated for you, to avoid leaking your real email address to the public.</p> <p>It will look similar to mine, which is <code>148553+cryptogoth@users.noreply.github.com</code></p>"},{"location":"SoftwareSetup/#4-create-a-configuration-script","title":"4. Create a configuration script","text":"<p>You'll run this script the first time you start up GitPod using this repository (below).</p> <p>Create the file in this location with this name, which you can do right from your repo's GitHub page from Step 3 by clicking the \"Add file\" and \"New file\" from the drop-down button.</p> <p><code>https://github.com/&lt;user-name&gt;/upper-division-cs</code></p> <p>Add the following path, notificing that the directories <code>dsa-23au</code> (meaning Data Structures &amp; Algorithms, Autumn 2023) and <code>scripts</code> already exist, and you are simply creating a new file called <code>git-config.sh</code></p> <pre><code>./scripts/git-config.sh`\n</code></pre> <p>In this file, paste the no-reply email address that you copied previous in Step 4. Then click \"Commit changes\" so that this email address is saved for future use.</p> <p>Don't worry, this is not a real email address, and this is a private repo, so you are not revealing anything unsafe by saving it here.</p>"},{"location":"SoftwareSetup/#5-finish-the-script","title":"5. Finish the script","text":"<p>Add the following lines to your newly , and modify it to fit around the no-reply email address that you pasted in Step 5.</p> <pre><code>#!/bin/sh\n\n# Enable us to push, through email privacy features\ngit config --global user.email &lt;no-reply-email-address&gt;\n</code></pre>"},{"location":"SoftwareSetup/#cloud-ide","title":"Cloud IDE","text":"<p>We will be using GitPod, a online integrated development environment (IDE) that can be accessed from any web browser, allowing you to easily work on lab computers or on your home machines.</p>"},{"location":"SoftwareSetup/#1-go-to-gitpod","title":"1. Go to GitPod","text":"<p>In your browser, enter the URL https://gitpod.io</p> <p>This is the first URL you'll enter into a web browser each time you sit down at a computer to work on this class.</p> <p>If you've chosen to download and install Desktop IDEs like VSCode or IntelliJ to your laptop, with the appropriate Gitpod plugins, you can open those IDEs directly.</p> <p>Choose to login via your GitHub account, which you've created or logged into as part of the previous section.</p>"},{"location":"SoftwareSetup/#2-link-your-linkedin-account","title":"2. Link Your LinkedIn Account","text":"<p>There is free plan allowing up to 50 hours per month of use if you create and link your LinkedIn account. You may wish to do this to connect with alumni, recruiters, or professionals in the field or specialty that you are interested in working in.</p> <p></p>"},{"location":"SoftwareSetup/#3-answer-the-survey","title":"3. Answer the Survey","text":"<p>Answer some preliminary questions about our use of Gitpod for this class. You can adjust your answers to suit your preferences, it won't affect your development experience.</p> <p></p>"},{"location":"SoftwareSetup/#4-open-a-workspace","title":"4. Open a Workspace","text":"<p>Since this is probably your first time using GitPod for this class, click on \"New workspace\" and copy and paste the private repo you created above.</p>"},{"location":"SoftwareSetup/#5-open-gitpod-in-your-browser","title":"5. Open GitPod in Your Browser","text":"<p>Choose \"Open in Browser\". This will open up VSCode in your browser.</p> <p></p> <p></p>"},{"location":"SoftwareSetup/#6-enable-write-permissions","title":"6. Enable Write Permissions","text":"<p>Enable permissions in Gitpod's integrations for Github / Bitbucket / Gitlab by navigating to this URL https://gitpod.io/user/integrations</p> <p>Next to the \"GitHub\" integration, click on the three dots and choose \"Manager this on github.com\"</p> <p></p> <p></p> <p></p>"},{"location":"SoftwareSetup/#7-set-your-git-config-email","title":"7. Set your Git Config Email","text":"<p>Run the <code>git-config.sh</code> script you set in the <code>GitHub</code> section above.</p>"},{"location":"SoftwareSetup/#8-source-environment-variables","title":"8. Source environment variables","text":"<pre><code>source ~/scripts/.shrc\n</code></pre>"},{"location":"SoftwareSetup/#9-update-this-document","title":"9. Update this Document","text":"<p>Test that everything works by making a change to these instructions, adding any corrections, insights, jokes, comments, or memes that you think will help future students.</p> <p>If you are looking for a beginner-friendly change to make, check out any open Issues for this GitHub repository.</p> <p>The file is located at</p> <pre><code>./dsa-23au/SoftwareSetup.md\n</code></pre> <p>Right-click the tab in GitPod and choose \"Open Preview\"</p> <p>All documentation in this class is written using Markdown, a simplified formatting language that is meant to be plaintext and human-readable.</p> <p>You can read more about using Markdown here.</p>"},{"location":"SoftwareSetup/#10-add-commit-push","title":"10. Add, Commit, Push","text":"<p>After making your changes, you will perform the <code>version control dance</code> of hackers everywhere.</p> <p>First you will stage your changes for commit. This helps separate changes that are ready and others which you may still be working on. In our case, we want to stage our changes to <code>SoftwareSetup.md</code>, since we want others to receive changes and corrections, but we will ignore our changes to <code>git-config.sh</code>, since it contains a no-reply email address that is specific to just us.</p> <pre><code>git add SoftwareSetup.md\n</code></pre> <p>Next, you will check the status to see that only the files you meant to stage are going to be committed. You will probably see two files to change.</p> <pre><code>git status\n</code></pre> <p>Then you'll commit the file that is staged.</p> <pre><code>git commit\n</code></pre> <p>This will bring up a temporary text editor pane in VSCode where you can type a brief, typically one-sentence message summarizing the changes you made.</p> <pre><code>git push\n</code></pre>"},{"location":"SoftwareSetup/#todo","title":"TODO","text":"<p>Here is a list where we'll collect beginner-friendly improvements that anyone can make. If you're looking for a change to make, take one from here There are a few things we'd like to run in every GitPod session we start up for this repository.</p> <p>One is to add the GraalVM Java Development Kit to our shell's <code>PATH</code> environment variable.</p> <p>Step 8 above, sourcing environment variables in <code>.shrc</code> should be done automatically when starting a GitPod workspace for this repo.</p> <p>I think this feature is enabled in the <code>.gitpod.yml</code> file.</p>"},{"location":"week-01/2023-09-26-ctf-event/","title":"CTF Event","text":"<p>WiCyS strategic partner Amazon will be hosting a jeopardy-style Capture the Flag (CTF). The challenge categories will include web, networking, cryptography, steganography, recon, reverse engineering, and pwn. Participation will be individual, but participants are allowed to collaborate. The CTF will start right after the September 28 webinar finishes and will run for 24 hours. All levels of technical skills are welcome. Prizes will be given to the winners! Sign up below to get access to the platform. The CTF will run from September 28, 11:00 am PST to September 29, 11:00 am PST.</p> <p>Sign up for the CTF here: https://amsec_wicys_ctf_competition.splashthat.com/</p>"},{"location":"week-01/2023-09-26/","title":"Week 1 - Day 1","text":""},{"location":"week-01/2023-09-26/#26-september-2023","title":"26 September 2023","text":""},{"location":"week-01/2023-09-26/#handouts","title":"Handouts","text":"<p>On paper, because technology may not work. Class syllabus. Short survey of students and their background, GitHub username, goals for learning DSA.</p>"},{"location":"week-01/2023-09-26/#faculty-introductions","title":"Faculty Introductions","text":"<p>Richard Weiss. weissr@evergreen.edu</p> <p>Paul Pham. paul.pham@evergreen.edu</p>"},{"location":"week-01/2023-09-26/#class-schedule","title":"Class Schedule","text":"<p>For the first week, and for rest of quarter.</p>"},{"location":"week-01/2023-09-26/#two-tracks","title":"Two Tracks","text":"<p>12 open slots for Changemakers Lab, to participate directly in Team Companies with a responsibility of Tuesday - Thursday afternoon sessions, to come up with their own learning goals and homework, and to benefit from the revolutionary ChangeMakers approach.</p> <p>Returning DSA Students get preference, open to everyone.</p> <p>Remaining students will get more time for pair programming, a curated selection of homeworks designed to teach and test your programming skills for future technical jobs, and a chance to deep dive on computer science.</p> <p>You can serve as a consultant for one of the ChangeMakers team companies, applying your knowledge from the homeworks to a real-world problem found by you or your teammates, and build a piece for your portfolio or website.</p>"},{"location":"week-01/2023-09-26/#assignment-1-due-friday-at-3pm-on-github","title":"Assignment 1 Due Friday, at 3pm on GitHub","text":"<ul> <li>Set up your GitPod development environment.</li> <li>Become familiar with the class monorepo.</li> <li>Become familiar with Markdown.</li> <li> <p>Participate in class knowledge co-creation through editing Markdown files in GitHub.</p> </li> <li> <p>Begin collecting a dataset in a spreadsheet (Google Sheets, Excel, Numbers)   based on your interests. Requirements</p> </li> <li> <p>Must be a real application / question from your life that has your interest: walking around campus or Olympia, or your daily life, or your programming life </p> </li> <li>Must have a new addition every one or two days, ideally several times per day </li> <li>Examples:<ul> <li>your exercise (running time), tracking any kind of personal habit, or those of your family and friends </li> </ul> </li> </ul>"},{"location":"week-01/2023-09-26/#datasets","title":"Datasets","text":"<p>https://docs.google.com/spreadsheets/d/1fEIboGic-SDntyGqop_vcySgVbKA11rs8wzzI_6BKEA/edit?usp=sharing</p>"},{"location":"week-01/2023-09-28/","title":"Week 1 - Day 2","text":"<p>Thursday, 2023 Sep 26</p> <p>CTF Event announcement at 11am</p>"},{"location":"week-01/2023-09-28/#housekeeping","title":"Housekeeping","text":"<p>(15 minutes)</p> <ul> <li>Allow ILC students to congregate and work on learning contracts. (Need examples and guidelines, TBD)</li> <li>Ask students to accept their GitHub invites to be maintainers of the monorepos</li> <li>Create a pull request and merge any remaining differences from their private forked repos to monorepo</li> <li>Delete their private forked repo.</li> <li>Check canvas sections</li> <li>Pair with someone different from last time.</li> </ul>"},{"location":"week-01/2023-09-28/#practice-markdown-co-creation","title":"Practice Markdown Co-Creation","text":"<p>(20 minutes to get started)</p> <ul> <li>Create a branch for your programming pair called <code>&lt;username1&gt;-&lt;username2&gt;</code></li> <li>All the new files below, you'll save in the <code>dsa-23au/notes/docs/chapter-01</code> directory</li> <li>Write one (or more) things you remember from Changemakers introduction on Tuesday morning</li> <li>Save it in a new Markdown file name <code>2023-09-26-Changemakers.md</code></li> <li>Suggestion: How can we apply or how have you been practicing these Changemaker concepts to DSA?</li> <li>Write one (or more) things you remember from DSA class.</li> <li>Save it in a new Markdown file name <code>2023-09-26-DSA.md</code></li> <li>Suggestion: Pick a future topic from the DSA Syllabus and descibe how it relates to one of the concepts or practices we've already discussed.</li> <li>Make one correction that you remember to the SoftwareSetup</li> <li>Suggestion: Check [GitHub Issues]</li> <li>While you have not merged all branches into a single <code>2023-09-26-Changemakers.md</code> file on <code>main</code> branch</li> <li>Create a PR for your branch, and ask one other classmate to review it who is only reviewing at most one other PR.</li> <li>At most two other classmates will request that you review their PRs. Do so by</li> <li>Creating a new branch <code>&lt;username1&gt;-&lt;username2&gt;-&lt;username3&gt;-&lt;username4&gt;</code></li> <li>Reviewers and reviewees converse back and forth using GitHub discussion threads and in-person.</li> <li>Reviewee can make changes as requested, or reviewer can make them directly and commit to branch.</li> <li>When both parties agree change is ready, they merge the two branches to a n </li> </ul>"},{"location":"week-01/2023-09-28/#fundamental-blah-of-dsa","title":"Fundamental Blah of DSA","text":"<p>(10 minutes)</p> <p>Let's keep working on an expression of our fundamental blah of Data Structures &amp; Algorithms. We want to apply it to a simple example:</p> <ul> <li>A sorted list of integers</li> <li>Reversing a linked list</li> </ul>"},{"location":"week-01/2023-09-28/#add-to-datasets","title":"Add to Datasets","text":"<p>(20 minutes)</p> <ul> <li>Start a dataset based on something meaningful to you and record it in a spreadsheet.</li> <li>Add a link to your dataset below.</li> <li>Collaborate with your partners to add more rows until you have about 20.</li> <li></li> </ul>"},{"location":"week-01/2023-09-28/#pair-programming","title":"Pair Programming","text":"<p>(20 minutes)</p> <ul> <li>Distribute printed out pages from this reading On Pair Programming.</li> <li>Ask students in pairs to read their pages and summarize 5 important points, and write it in a new MD file   named <code>MERGE-ME-2023-09-28-&lt;username1&gt;-&lt;username2&gt;</code></li> <li></li> </ul>"},{"location":"week-01/2023-09-28/#class-summary","title":"Class Summary","text":""},{"location":"week-01/2023-09-28/#arrays-and-links-exercise","title":"Arrays and Links Exercise","text":"<p>(1 hour)</p> <ul> <li>With a pair programming partner, in GitPod or your favorite development environment</li> <li>Create a branch containing your usernames and <code>array-links</code> somewhere.</li> <li>Change to <code>dsa-23au/java-dsa/array-links/src/main/resources</code> </li> <li>Export your dataset spreadsheet from above to a CSV file. Add this to the monorepo in the directory above.</li> <li>Divide up in the class the methods of the <code>java.util.List</code> interface.</li> <li>Implement your methods with a partner in interface.</li> <li>Write some unit tests in <code>dsa-23au/java-dsa/array-links/src/test</code>, commit and push.</li> <li>Compile it into a JAR with <code>mvn package</code></li> <li>Run unit tests with <code>mvn test</code></li> <li>Create a pull-request from your branch and request a review from someone else in the class who hasn't already been requested.</li> <li>Review the PR that one of your class mates has requested that you do.</li> <li>Both reviewer and reviewee exchange feedback until it is ready to marge.</li> <li>Merge the PR and close it.</li> </ul>"},{"location":"week-01/asymptotic/","title":"Asymptotic Analysis","text":"<p>Infinity is a mysterious entity in mathematics. In addition to having the property of being larger than any real number, it helps define behaviors at a limit, for example, series of numbers that proceed in an algorithmic way:</p> \\[ \\operatorname{ker} f=\\{g\\in G:f(g)=e_{H}\\}{\\mbox{.}} \\] <p>there is usually a formula to proceed from </p>"},{"location":"week-01/chapter_1/","title":"Intro---Duality---Five Problems","text":""},{"location":"week-01/chapter_1/#the-duality-of-time-and-space","title":"The Duality of Time and Space","text":"<p>Exercise: * Pick a duality from another science, area of knowledge, popular culture, your favorite movies and books. Describe how the duals complement and define each other, what role balance plays, and how you can tradeoff one dual for another.</p>"},{"location":"week-01/chapter_1/#five-problems","title":"Five Problems","text":""},{"location":"week-01/chapter_1/#satisfiability","title":"Satisfiability","text":"<p>Satisfaction is </p>"},{"location":"week-01/chapter_1/#knapsack","title":"Knapsack","text":""},{"location":"week-01/chapter_1/#classifier","title":"Classifier","text":""},{"location":"week-01/chapter_1/#go-endgames","title":"Go Endgames","text":""},{"location":"week-01/chapter_1/#reinforcement-learning","title":"Reinforcement Learning","text":""},{"location":"week-01/chapter_1/#asymptotic-analysis","title":"Asymptotic Analysis","text":""},{"location":"week-01/chapter_1/#time-and-its-growth","title":"Time and its Growth","text":""},{"location":"week-01/chapter_1/#space-and-its-growth","title":"Space and its Growth","text":""},{"location":"week-01/chapter_1/#the-ram-model","title":"The RAM Model","text":"<p>In Donald Knuth's classic and neverending text, The Art of Computer Programming, he invents and uses an imaginary assembly language called MMIX. Some programmers may think that assembly language is too low level and has no bearing on analyzing algorithms day to day, and they have a point: you don't need to  understand the laws of quantum physics to use a computer, and yet this daily task rests on a foundation of electrons tunneling between semiconductors of different types.</p> <p>[insert picture of RAM DIMMs] [insert picture of RAM grid]</p> <p>Underlying all algorithmic analysis on all modern computers that you can use today is the RAM Model, which stands for (Random Access Memory). Other than being the greatest techno album of all time from Daft Punk, Random Access Memory means that \"constant-time access to any address.\" Whether you want to  read address </p>"},{"location":"week-01/chapter_1/#arrays","title":"Arrays","text":"<p>An array is the \"bare metal\" of the RAM Model, the ur-data-structure. It is the most direct access that programmers have to the underlying hardware because it behaves exactly as the memory circuits do: it's a vast contiguous grid of memory locations in sequential order, with address bits being input, and the corresponding data bits being output (if it's a read-only operation) or with data bits being input to overwrite the existing data (if it's a write operation).</p> <p>Think of arrays as a row of lockers or house addresses on a street, with the quirk that the addresses start at 0. The reason is that </p>"},{"location":"week-01/chapter_1/#links","title":"Links","text":""},{"location":"week-01/chapter_1/#single-double-and-more","title":"Single, Double, and More","text":""},{"location":"week-02/chapter_2/","title":"Chapter 2: Trees---Heaps---CRUD","text":""},{"location":"week-03/chapter_3/","title":"Chapter 3: Greed---Satisficing---Optimality","text":""},{"location":"week-03/chapter_3/#spaced-repetition","title":"Spaced Repetition","text":"<p>Chadwick picks glumly at his calzone.</p> <p>\"What's wrong now, stuck in a filter bubble of doom?\" Idris asks.</p> <p>His friend chuckles weakly. \"Close. I have that big algorithms exam coming up in six weeks, and I'm having trouble remembering everything. I think I've reached the biological limits of my memory.\"</p> <p>Idris snorts. \"You know, neuroscience hasn't discovered such a limit. Neurogenesis is just  a theory, but there is some evidence that adults keep generating new brain cells even after age 25. That limit is just a scientific urban legend.\"</p> <p>\"You mean I can just remember things infinitely if I try hard enough?\"</p> <p>\"Not by brute force. But have you heard of this technique called spaced repetition?\"</p> <p>\"Is that what NASA calls its program of sending space probes out to die in the utter vacuum of the cosmos?\"</p> <p>\"Oh look who's got jokes now. No dumbass, spaced repetition is a theory of learning that says if have a structured schedule of learning concepts, you can repeat them again at longer and longer intervals. Every day in the schedule, you can learn something new or repeat a previous concept. At first you repeat it the next day, then in three days, then seven, and so on.. basically forever if you can keep track of it.\"</p> <p>Chadwick muses this. \"Is the schedule different for everyone, or the same?\"</p> <p>\"That's a good question, I don't know. That would be a great dissertation for an education major. Say weren't you seeing that hottie who was getting a Master's in Teaching...\"</p> <p>\"Let's stay on topic,\" Chadwick waved off his friend's attempt to get details. \"Spaced repetition. So if I have six weeks, how many days of information can I learn?\"</p> <p>\"Enough handwaving, let's get serious,\" Idris knocks all the stray potato chip wrappers, energy drink bottles, and clutter off the desk and grabs an empty sheet of paper. He clicks open his pen. \"Let's give these variables names. First, let's label the Day 1 material.\"</p> <p>$1, ..., 1, ..., ..., 1, ..., ..., ..., ..., 1, ..., $</p> <p>Let's call a day's worth of learning material a Bok.</p> <p>Why not a Book?</p> <p>\"What are you, chicken?\"</p> <p>\"Have you heard of spaced repetitino?\"</p> <p>Let's say the schedule for each day is given by the term \\(x_{i,j}\\), where \\(i\\) is the  material for Day \\(i\\) and \\(j\\) is the iteration. So the first time you learn the material Day 1 is</p> <p>\\(x_{1,1}\\)</p> <p>and the allowed gap until the next iteration from \\(x_{i,j}\\) is between \\(a x_{i,j}\\) and  $(a+1) x_{i,j}. So the second time you learn the material Day 1 is </p> <p>\\(a x_{1,1} \\le x_{1,2} \\le (a+1) x_{1,1}\\)</p> <p>Let's say you schedule each day's repetition \\(x_{i,j}\\) in the earliest free slot in the  range, but you also want to maximize the amount of material that you learn. Let's also say  \\(k\\) repetitions are sufficient for you to remember something for the test.</p> <p>If you have \\(n\\) days, how many days \"Now, all the \\(...\\) are empty days where you can learn new material.\"</p> <p>\"But have you heard of spaced repetition?\"</p> <p>\"Isn't that when you have to say something twice for someone who isn't paying attention? Very funny. Now let's label day 2 material.\"</p> <p>$1, 2, 1, 2, ..., 1, 2, ..., ..., ..., 1, 2, $</p> <p>So on Day 1, you learn Bok 1, on Day 2, you learn Bok 2, and so forth, pushing more and more  new Boks for the first time until you reach Day \\(a\\), when you have to repeat Bok 1 again  or  you'll have to start its schedule over from scratch. This time, you got to repeat Boks 1 through \\(a\\)  on Days \\(a+1\\) through \\(a+a\\), or \\(2a\\), and then you have room for another \\(a\\) new Boks until you  have to repeat Bok 1 again. So that's \\(m == 2a\\) Boks so far, if \\(n\\) is \\(4a\\), and \\(k\\) is 2.</p> <p>Okay, I'm starting to see a pattern. So let's say \\(n\\) is 6 weeks, or \\(6 \\times 7 = 63\\) days.</p> <p>Then we rearrange </p> <ol> <li>second</li> <li>third</li> </ol>"},{"location":"week-04/chapter_4/","title":"Chapter 4: Caching---Subdividing---Recursion","text":""},{"location":"week-05/chapter_5/","title":"Chapter 5: Graphs---Clustering","text":""},{"location":"week-06/chapter_6/","title":"Chapter 6: Paths---Flows","text":""},{"location":"week-07/chapter_7/","title":"Chapter 7: Sorting---Sampling","text":""},{"location":"week-08/chapter_8/","title":"Chapter 8: Parallel---Distributed---Quantum","text":""},{"location":"week-09/chapter_9/","title":"Chapter 9: Outro---Five Systems","text":""}]}